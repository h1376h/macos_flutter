name: Desktop Release
on:
  # Enable manual run
  workflow_dispatch:
    inputs:
      version:
        description: "Tag to create (e.g. v1.0.0). Must include 'v' and must match pubspec"
        required: true
        default: "v1.0.0"
        type: string

# Declare default permissions as read only.
# permissions: read-all

jobs:
  draft-release:
    name: Draft Github release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Draft release with release notes
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          draft: false
          prerelease: true
          generate_release_notes: true

  create-build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [macOS, Windows]
        include:
          - os: macos-latest
            target: macOS
            build_target: macos
            build_path: build/macos/Build/Products/Release
            asset_content_type: application/zip
          - os: windows-latest
            target: Windows
            build_target: windows
            build_path: build\windows\runner\Release
            asset_content_type: application/zip

      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
    needs: draft-release
    steps:
      # Set up Flutter.
      - name: Clone Flutter repository with master channel
        uses: subosito/flutter-action@v2.10.0
        with:
          channel: "beta" # 'dev', 'alpha', default to: 'stable'
          #flutter-version: '3.0.x' # you can also specify exact version of flutter
          
      - name: Enable desktop support
        run: |
          flutter config --enable-macos-desktop
          flutter config --enable-windows-desktop
          
      - run: flutter doctor -v
      
      # Checkout code, recreate missing files, and get packages.
      - name: Checkout code
        uses: actions/checkout@v4.1.0
      - run: flutter clean
      - run: flutter create .
    
      - run: flutter pub get

      # Build the application.
      - run: flutter build -v ${{ matrix.build_target }} --release

      # Package the build.
      - name: Copy VC redistributables to release directory for Windows
        if: matrix.target == 'Windows'
        run: |
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
          Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .
        working-directory: ${{ matrix.build_path }}
      
      - name: Compress build for macOS
        if: matrix.target == 'macOS'
        run: ditto -c -k --sequesterRsrc --keepParent macos_flutter.app $GITHUB_WORKSPACE/test_${{ matrix.target }}.zip
        working-directory: ${{ matrix.build_path }}
      
      - name: Compress build for Windows
        if: matrix.target == 'Windows'
        run: compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\test_${{ matrix.target }}.zip
        working-directory: ${{ matrix.build_path }}

      # Upload the build.
      - name: Add packaged build to release draft
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.draft-release.outputs.upload_url }}
          asset_path: ./test_${{ matrix.target }}.zip
          asset_name: ${{ matrix.target }}_${{ github.event.inputs.version }}.zip
          asset_content_type: ${{ matrix.asset_content_type }}
